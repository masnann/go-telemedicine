// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "go-telemedicine/models"

	mock "github.com/stretchr/testify/mock"
)

// ScheduleRepositoryInterface is an autogenerated mock type for the ScheduleRepositoryInterface type
type ScheduleRepositoryInterface struct {
	mock.Mock
}

// CreateSchedule provides a mock function with given fields: req
func (_m *ScheduleRepositoryInterface) CreateSchedule(req models.ScheduleModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedule")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ScheduleModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.ScheduleModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.ScheduleModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListAvailableSchedule provides a mock function with given fields: req
func (_m *ScheduleRepositoryInterface) FindListAvailableSchedule(req models.ScheduleFindListAvailableRequest) ([]models.ScheduleModels, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for FindListAvailableSchedule")
	}

	var r0 []models.ScheduleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ScheduleFindListAvailableRequest) ([]models.ScheduleModels, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.ScheduleFindListAvailableRequest) []models.ScheduleModels); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ScheduleFindListAvailableRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindScheduleByID provides a mock function with given fields: id
func (_m *ScheduleRepositoryInterface) FindScheduleByID(id int64) (models.ScheduleModels, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindScheduleByID")
	}

	var r0 models.ScheduleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.ScheduleModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.ScheduleModels); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ScheduleModels)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScheduleRepositoryInterface creates a new instance of ScheduleRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleRepositoryInterface {
	mock := &ScheduleRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
